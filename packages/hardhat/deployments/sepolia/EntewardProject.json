{
  "address": "0x4D3ADCDDA510F9556c10491D8D253b2aa5eE9d19",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "initialOwner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "ERC721IncorrectOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ERC721InsufficientApproval",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "approver",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidApprover",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidOperator",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidReceiver",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidSender",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ERC721NonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EmptyProposalURI",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "enum EntewardProject.ProjectStatus",
          "name": "current",
          "type": "uint8"
        },
        {
          "internalType": "enum EntewardProject.ProjectStatus",
          "name": "requested",
          "type": "uint8"
        }
      ],
      "name": "InvalidStatusTransition",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoProjectsExist",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "page",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxPages",
          "type": "uint256"
        }
      ],
      "name": "PageOutOfBounds",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ProjectNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReportURIRequired",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransfersNotAllowed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "proposalURI",
          "type": "string"
        }
      ],
      "name": "ProjectCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "reportURI",
          "type": "string"
        }
      ],
      "name": "ProjectReportAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum EntewardProject.ProjectStatus",
          "name": "newStatus",
          "type": "uint8"
        }
      ],
      "name": "ProjectStatusUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getProject",
      "outputs": [
        {
          "internalType": "enum EntewardProject.ProjectStatus",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "proposalURI",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "reportURI",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "projectsPerPage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "page",
          "type": "uint256"
        }
      ],
      "name": "getProjects",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "enum EntewardProject.ProjectStatus[]",
          "name": "statuses",
          "type": "uint8[]"
        },
        {
          "internalType": "string[]",
          "name": "proposalURIs",
          "type": "string[]"
        },
        {
          "internalType": "string[]",
          "name": "reportURIs",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalProjects",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "projects",
      "outputs": [
        {
          "internalType": "enum EntewardProject.ProjectStatus",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "proposalURI",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "reportURI",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "proposalURI",
          "type": "string"
        }
      ],
      "name": "safeMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "enum EntewardProject.ProjectStatus",
          "name": "newStatus",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "reportURI",
          "type": "string"
        }
      ],
      "name": "updateStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xcce8ae45a5153dc0e1dcdf518740668a8002bc48357ff4b711dcdcd80a8ab723",
  "receipt": {
    "to": null,
    "from": "0xF68B75C16B140EF5258132999E2B9692ECbcf819",
    "contractAddress": "0x4D3ADCDDA510F9556c10491D8D253b2aa5eE9d19",
    "transactionIndex": 78,
    "gasUsed": "1938823",
    "logsBloom": "0x
    "blockHash": "0x196d6d8eb79409e22c4040c458188a64d94b201435b1d244c2fba145ec7eda5f",
    "transactionHash": "0xcce8ae45a5153dc0e1dcdf518740668a8002bc48357ff4b711dcdcd80a8ab723",
    "logs": [
      {
        "transactionIndex": 78,
        "blockNumber": 8560951,
        "transactionHash": "0xcce8ae45a5153dc0e1dcdf518740668a8002bc48357ff4b711dcdcd80a8ab723",
        "address": "0x4D3ADCDDA510F9556c10491D8D253b2aa5eE9d19",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f68b75c16b140ef5258132999e2b9692ecbcf819"
        ],
        "data": "0x",
        "logIndex": 70,
        "blockHash": "0x196d6d8eb79409e22c4040c458188a64d94b201435b1d244c2fba145ec7eda5f"
      }
    ],
    "blockNumber": 8560951,
    "cumulativeGasUsed": "7711859",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xF68B75C16B140EF5258132999E2B9692ECbcf819"
  ],
  "numDeployments": 1,
  "solcInputHash": "df00028eb2fac9f5fba05c13240dbf91",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyProposalURI\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"enum EntewardProject.ProjectStatus\",\"name\":\"current\",\"type\":\"uint8\"},{\"internalType\":\"enum EntewardProject.ProjectStatus\",\"name\":\"requested\",\"type\":\"uint8\"}],\"name\":\"InvalidStatusTransition\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoProjectsExist\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"page\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPages\",\"type\":\"uint256\"}],\"name\":\"PageOutOfBounds\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ProjectNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReportURIRequired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransfersNotAllowed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"proposalURI\",\"type\":\"string\"}],\"name\":\"ProjectCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reportURI\",\"type\":\"string\"}],\"name\":\"ProjectReportAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum EntewardProject.ProjectStatus\",\"name\":\"newStatus\",\"type\":\"uint8\"}],\"name\":\"ProjectStatusUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getProject\",\"outputs\":[{\"internalType\":\"enum EntewardProject.ProjectStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"proposalURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"reportURI\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"projectsPerPage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"page\",\"type\":\"uint256\"}],\"name\":\"getProjects\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"enum EntewardProject.ProjectStatus[]\",\"name\":\"statuses\",\"type\":\"uint8[]\"},{\"internalType\":\"string[]\",\"name\":\"proposalURIs\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"reportURIs\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalProjects\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"projects\",\"outputs\":[{\"internalType\":\"enum EntewardProject.ProjectStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"proposalURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"reportURI\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"proposalURI\",\"type\":\"string\"}],\"name\":\"safeMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum EntewardProject.ProjectStatus\",\"name\":\"newStatus\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"reportURI\",\"type\":\"string\"}],\"name\":\"updateStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"ERC721 token contract for managing community projects with immutable blockchain records\",\"errors\":{\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ProjectNotFound(uint256)\":[{\"details\":\"Custom errors for gas optimization and better error handling\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"ProjectCreated(uint256,string)\":{\"details\":\"Emitted when a new project is created\",\"params\":{\"proposalURI\":\"The URI containing project proposal details\",\"tokenId\":\"The unique identifier of the project\"}},\"ProjectReportAdded(uint256,string)\":{\"details\":\"Emitted when a completion report is added to a project\",\"params\":{\"reportURI\":\"The URI containing project completion report\",\"tokenId\":\"The unique identifier of the project\"}},\"ProjectStatusUpdated(uint256,uint8)\":{\"details\":\"Emitted when a project's status is updated\",\"params\":{\"newStatus\":\"The new status of the project\",\"tokenId\":\"The unique identifier of the project\"}},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Override approve to prevent approvals since transfers are disabled\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"constructor\":{\"details\":\"Constructor initializes the ERC721 token and sets the initial owner\",\"params\":{\"initialOwner\":\"Address that will own the contract and can mint/update projects\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getProject(uint256)\":{\"details\":\"Retrieves detailed information for a specific project\",\"params\":{\"tokenId\":\"The unique identifier of the project\"},\"returns\":{\"proposalURI\":\"URI containing project proposal details\",\"reportURI\":\"URI containing project completion report (empty if not completed)\",\"status\":\"Current status of the project\"}},\"getProjects(uint256,uint256)\":{\"details\":\"Retrieves a paginated list of projects in descending order (newest first)\",\"params\":{\"page\":\"Page number (0-indexed, page 0 contains newest projects)\",\"projectsPerPage\":\"Number of projects to return per page\"},\"returns\":{\"proposalURIs\":\"Array of project proposal URIs\",\"reportURIs\":\"Array of project report URIs\",\"statuses\":\"Array of project statuses\",\"tokenIds\":\"Array of project token IDs\"}},\"getTotalProjects()\":{\"details\":\"Returns the total number of projects created\",\"returns\":{\"_0\":\"Total count of projects (equivalent to _nextTokenId)\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"safeMint(string)\":{\"details\":\"Creates a new project NFT with the specified proposal\",\"params\":{\"proposalURI\":\"URI containing the project proposal details (cannot be empty)\"},\"returns\":{\"tokenId\":\"The unique identifier of the newly created project\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Override setApprovalForAll to prevent approvals since transfers are disabled\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateStatus(uint256,uint8,string)\":{\"details\":\"Updates the status of an existing project with optional completion report\",\"params\":{\"newStatus\":\"The new status to assign to the project\",\"reportURI\":\"URI containing completion report (required for completed projects)\",\"tokenId\":\"The unique identifier of the project to update\"}}},\"stateVariables\":{\"VERSION\":{\"details\":\"Contract version for tracking deployments\"},\"_nextTokenId\":{\"details\":\"Counter for generating unique token IDs, starts at 0\"},\"projects\":{\"details\":\"Mapping from token ID to project data\"}},\"title\":\"EntewardProject\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approve(address,uint256)\":{\"notice\":\"Approvals are not allowed as transfers are disabled\"},\"getProject(uint256)\":{\"notice\":\"Reverts if the project does not exist\"},\"getProjects(uint256,uint256)\":{\"notice\":\"Gas-optimized for batch retrieval of project dataReturns empty arrays if no projects exist on the requested page\"},\"getTotalProjects()\":{\"notice\":\"Useful for pagination calculations and UI display\"},\"safeMint(string)\":{\"notice\":\"Only the contract owner can create new projectsProjects are minted to the contract owner and cannot be transferredProjects start with \\\"Upcoming\\\" status by default\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"Approvals are not allowed as transfers are disabled\"},\"updateStatus(uint256,uint8,string)\":{\"notice\":\"Only the contract owner can update project statusStatus transitions follow strict rules to maintain data integrityCompleted projects must include a report URI\"}},\"notice\":\"This contract allows local representatives to create, track, and update community projects Each project is represented as an NFT with proposal and report URIs stored immutably on-chain\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/EntewardProject.sol\":\"EntewardProject\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\nimport {IERC721Receiver} from \\\"./IERC721Receiver.sol\\\";\\nimport {IERC721Metadata} from \\\"./extensions/IERC721Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {Strings} from \\\"../../utils/Strings.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {IERC721Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    mapping(uint256 tokenId => address) private _owners;\\n\\n    mapping(address owner => uint256) private _balances;\\n\\n    mapping(uint256 tokenId => address) private _tokenApprovals;\\n\\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        return _requireOwned(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual {\\n        _approve(to, tokenId, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\\n        _requireOwned(tokenId);\\n\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        address previousOwner = _update(to, tokenId, _msgSender());\\n        if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\\n        transferFrom(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     *\\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\\n     */\\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\\n     * particular (ignoring whether it is owned by `owner`).\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            spender != address(0) &&\\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\\n     * the `spender` for the specific `tokenId`.\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\\n        if (!_isAuthorized(owner, spender, tokenId)) {\\n            if (owner == address(0)) {\\n                revert ERC721NonexistentToken(tokenId);\\n            } else {\\n                revert ERC721InsufficientApproval(spender, tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\\n     *\\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\\n     * remain consistent with one another.\\n     */\\n    function _increaseBalance(address account, uint128 value) internal virtual {\\n        unchecked {\\n            _balances[account] += value;\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\\n        address from = _ownerOf(tokenId);\\n\\n        // Perform (optional) operator check\\n        if (auth != address(0)) {\\n            _checkAuthorized(from, auth, tokenId);\\n        }\\n\\n        // Execute the update\\n        if (from != address(0)) {\\n            // Clear approval. No need to re-authorize or emit the Approval event\\n            _approve(address(0), tokenId, address(0), false);\\n\\n            unchecked {\\n                _balances[from] -= 1;\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            unchecked {\\n                _balances[to] += 1;\\n            }\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        return from;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner != address(0)) {\\n            revert ERC721InvalidSender(address(0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        _checkOnERC721Received(address(0), to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        address previousOwner = _update(address(0), tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        } else if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - `to` cannot be the zero address.\\n     * - `from` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth) internal {\\n        _approve(to, tokenId, auth, true);\\n    }\\n\\n    /**\\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\\n     * emitted in the context of transfers.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\\n        // Avoid reading the owner unless necessary\\n        if (emitEvent || auth != address(0)) {\\n            address owner = _requireOwned(tokenId);\\n\\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\\n                revert ERC721InvalidApprover(auth);\\n            }\\n\\n            if (emitEvent) {\\n                emit Approval(owner, to, tokenId);\\n            }\\n        }\\n\\n        _tokenApprovals[tokenId] = to;\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Requirements:\\n     * - operator can't be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\\n     * Returns the owner.\\n     *\\n     * Overrides to ownership logic should be done to {_ownerOf}.\\n     */\\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    revert ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert ERC721InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x13dd061770956c8489b80cfc89d9cdfc8ea2783d953691ea037a380731d52784\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"contracts/EntewardProject.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Compatible with OpenZeppelin Contracts ^5.0.0\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport { ERC721 } from \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @title EntewardProject\\n * @dev ERC721 token contract for managing community projects with immutable blockchain records\\n * @notice This contract allows local representatives to create, track, and update community projects\\n * Each project is represented as an NFT with proposal and report URIs stored immutably on-chain\\n */\\ncontract EntewardProject is ERC721, Ownable {\\n    /// @dev Contract version for tracking deployments\\n    string public constant VERSION = \\\"0.1.0\\\";\\n\\n    /// @dev Counter for generating unique token IDs, starts at 0\\n    uint256 private _nextTokenId;\\n\\n    /**\\n     * @dev Enum representing the lifecycle status of a project\\n     * @notice Status transitions are restricted to prevent invalid state changes\\n     */\\n    enum ProjectStatus {\\n        Upcoming, // 0: Project proposed but not started yet\\n        Ongoing, // 1: Project is currently in progress\\n        Cancelled, // 2: Project has been cancelled (terminal state)\\n        Completed // 3: Project has been finished with report (terminal state)\\n    }\\n\\n    /**\\n     * @dev Struct containing all project-related data\\n     * @param status Current status of the project\\n     * @param proposalURI IPFS hash or URL containing project proposal details\\n     * @param reportURI IPFS hash or URL containing completion report (only for completed projects)\\n     */\\n    struct Project {\\n        ProjectStatus status;\\n        string proposalURI;\\n        string reportURI;\\n    }\\n\\n    /// @dev Mapping from token ID to project data\\n    mapping(uint256 => Project) public projects;\\n\\n    /**\\n     * @dev Emitted when a new project is created\\n     * @param tokenId The unique identifier of the project\\n     * @param proposalURI The URI containing project proposal details\\n     */\\n    event ProjectCreated(uint256 indexed tokenId, string proposalURI);\\n\\n    /**\\n     * @dev Emitted when a project's status is updated\\n     * @param tokenId The unique identifier of the project\\n     * @param newStatus The new status of the project\\n     */\\n    event ProjectStatusUpdated(uint256 indexed tokenId, ProjectStatus newStatus);\\n\\n    /**\\n     * @dev Emitted when a completion report is added to a project\\n     * @param tokenId The unique identifier of the project\\n     * @param reportURI The URI containing project completion report\\n     */\\n    event ProjectReportAdded(uint256 indexed tokenId, string reportURI);\\n\\n    /**\\n     * @dev Custom errors for gas optimization and better error handling\\n     */\\n    error ProjectNotFound(uint256 tokenId);\\n    error InvalidStatusTransition(ProjectStatus current, ProjectStatus requested);\\n    error ReportURIRequired();\\n    error NoProjectsExist();\\n    error PageOutOfBounds(uint256 page, uint256 maxPages);\\n    error EmptyProposalURI();\\n    error TransfersNotAllowed();\\n\\n    /**\\n     * @dev Constructor initializes the ERC721 token and sets the initial owner\\n     * @param initialOwner Address that will own the contract and can mint/update projects\\n     */\\n    constructor(address initialOwner) ERC721(\\\"EntewardProject\\\", \\\"EP\\\") Ownable(initialOwner) {}\\n\\n    /**\\n     * @dev Creates a new project NFT with the specified proposal\\n     * @param proposalURI URI containing the project proposal details (cannot be empty)\\n     * @return tokenId The unique identifier of the newly created project\\n     * @notice Only the contract owner can create new projects\\n     * @notice Projects are minted to the contract owner and cannot be transferred\\n     * @notice Projects start with \\\"Upcoming\\\" status by default\\n     */\\n    function safeMint(string calldata proposalURI) external onlyOwner returns (uint256 tokenId) {\\n        if (bytes(proposalURI).length == 0) revert EmptyProposalURI();\\n\\n        tokenId = _nextTokenId++;\\n        _safeMint(owner(), tokenId);\\n\\n        projects[tokenId] = Project({ status: ProjectStatus.Upcoming, proposalURI: proposalURI, reportURI: \\\"\\\" });\\n\\n        emit ProjectCreated(tokenId, proposalURI);\\n    }\\n\\n    /**\\n     * @dev Updates the status of an existing project with optional completion report\\n     * @param tokenId The unique identifier of the project to update\\n     * @param newStatus The new status to assign to the project\\n     * @param reportURI URI containing completion report (required for completed projects)\\n     * @notice Only the contract owner can update project status\\n     * @notice Status transitions follow strict rules to maintain data integrity\\n     * @notice Completed projects must include a report URI\\n     */\\n    function updateStatus(uint256 tokenId, ProjectStatus newStatus, string calldata reportURI) external onlyOwner {\\n        if (_ownerOf(tokenId) == address(0)) revert ProjectNotFound(tokenId);\\n\\n        Project storage project = projects[tokenId];\\n\\n        if (!_isValidStatusTransition(project.status, newStatus)) {\\n            revert InvalidStatusTransition(project.status, newStatus);\\n        }\\n\\n        if (newStatus == ProjectStatus.Completed && bytes(reportURI).length == 0) {\\n            revert ReportURIRequired();\\n        }\\n\\n        project.status = newStatus;\\n        emit ProjectStatusUpdated(tokenId, newStatus);\\n\\n        if (newStatus == ProjectStatus.Completed) {\\n            project.reportURI = reportURI;\\n            emit ProjectReportAdded(tokenId, reportURI);\\n        }\\n    }\\n\\n    /**\\n     * @dev Retrieves a paginated list of projects in descending order (newest first)\\n     * @param projectsPerPage Number of projects to return per page\\n     * @param page Page number (0-indexed, page 0 contains newest projects)\\n     * @return tokenIds Array of project token IDs\\n     * @return statuses Array of project statuses\\n     * @return proposalURIs Array of project proposal URIs\\n     * @return reportURIs Array of project report URIs\\n     * @notice Gas-optimized for batch retrieval of project data\\n     * @notice Returns empty arrays if no projects exist on the requested page\\n     */\\n    function getProjects(\\n        uint256 projectsPerPage,\\n        uint256 page\\n    )\\n        external\\n        view\\n        returns (\\n            uint256[] memory tokenIds,\\n            ProjectStatus[] memory statuses,\\n            string[] memory proposalURIs,\\n            string[] memory reportURIs\\n        )\\n    {\\n        uint256 totalProjects = _nextTokenId;\\n        if (totalProjects == 0) revert NoProjectsExist();\\n\\n        uint256 startIndex = page * projectsPerPage;\\n        if (startIndex >= totalProjects) {\\n            revert PageOutOfBounds(page, (totalProjects - 1) / projectsPerPage);\\n        }\\n\\n        uint256 endIndex = startIndex + projectsPerPage;\\n        if (endIndex > totalProjects) {\\n            endIndex = totalProjects;\\n        }\\n\\n        uint256 resultLength = endIndex - startIndex;\\n\\n        tokenIds = new uint256[](resultLength);\\n        statuses = new ProjectStatus[](resultLength);\\n        proposalURIs = new string[](resultLength);\\n        reportURIs = new string[](resultLength);\\n\\n        // Fill arrays in descending order (latest projects first)\\n        unchecked {\\n            for (uint256 i = 0; i < resultLength; ++i) {\\n                uint256 tokenId = totalProjects - 1 - startIndex - i;\\n                Project storage project = projects[tokenId];\\n\\n                tokenIds[i] = tokenId;\\n                statuses[i] = project.status;\\n                proposalURIs[i] = project.proposalURI;\\n                reportURIs[i] = project.reportURI;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Retrieves detailed information for a specific project\\n     * @param tokenId The unique identifier of the project\\n     * @return status Current status of the project\\n     * @return proposalURI URI containing project proposal details\\n     * @return reportURI URI containing project completion report (empty if not completed)\\n     * @notice Reverts if the project does not exist\\n     */\\n    function getProject(\\n        uint256 tokenId\\n    ) external view returns (ProjectStatus status, string memory proposalURI, string memory reportURI) {\\n        if (_ownerOf(tokenId) == address(0)) revert ProjectNotFound(tokenId);\\n\\n        Project storage project = projects[tokenId];\\n        return (project.status, project.proposalURI, project.reportURI);\\n    }\\n\\n    /**\\n     * @dev Returns the total number of projects created\\n     * @return Total count of projects (equivalent to _nextTokenId)\\n     * @notice Useful for pagination calculations and UI display\\n     */\\n    function getTotalProjects() external view returns (uint256) {\\n        return _nextTokenId;\\n    }\\n\\n    /**\\n     * @dev Internal function to validate status transitions\\n     * @param currentStatus The current status of the project\\n     * @param newStatus The requested new status\\n     * @return bool True if the transition is valid, false otherwise\\n     * @notice Implements business logic for valid project lifecycle transitions\\n     */\\n    function _isValidStatusTransition(\\n        ProjectStatus currentStatus,\\n        ProjectStatus newStatus\\n    ) private pure returns (bool) {\\n        // Terminal states cannot be changed\\n        if (currentStatus == ProjectStatus.Cancelled || currentStatus == ProjectStatus.Completed) {\\n            return false;\\n        }\\n\\n        // Upcoming projects can only go to Ongoing or Cancelled\\n        if (currentStatus == ProjectStatus.Upcoming) {\\n            return newStatus == ProjectStatus.Ongoing || newStatus == ProjectStatus.Cancelled;\\n        }\\n\\n        // Ongoing projects can only go to Completed or Cancelled\\n        if (currentStatus == ProjectStatus.Ongoing) {\\n            return newStatus == ProjectStatus.Completed || newStatus == ProjectStatus.Cancelled;\\n        }\\n\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Override transfer functions to prevent NFT transfers\\n     * @notice Project NFTs are immutable records and cannot be transferred\\n     * @notice This ensures project ownership remains with the contract owner\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal override returns (address) {\\n        address from = _ownerOf(tokenId);\\n\\n        // Allow minting (from == address(0)) but prevent all transfers\\n        if (from != address(0) && to != address(0)) {\\n            revert TransfersNotAllowed();\\n        }\\n\\n        return super._update(to, tokenId, auth);\\n    }\\n\\n    /**\\n     * @dev Override approve to prevent approvals since transfers are disabled\\n     * @notice Approvals are not allowed as transfers are disabled\\n     */\\n    function approve(address, uint256) public pure override {\\n        revert TransfersNotAllowed();\\n    }\\n\\n    /**\\n     * @dev Override setApprovalForAll to prevent approvals since transfers are disabled\\n     * @notice Approvals are not allowed as transfers are disabled\\n     */\\n    function setApprovalForAll(address, bool) public pure override {\\n        revert TransfersNotAllowed();\\n    }\\n}\\n\",\"keccak256\":\"0xbd0435fb776dfd0942a22c537c34916025970ba6058df0c8649b3aa72b90a0a5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620023883803806200238883398101604081905262000034916200012f565b806040518060400160405280600f81526020016e115b9d195dd85c99141c9bda9958dd608a1b81525060405180604001604052806002815260200161045560f41b815250816000908162000089919062000206565b50600162000098828262000206565b5050506001600160a01b038116620000ca57604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b620000d581620000dd565b5050620002d2565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000602082840312156200014257600080fd5b81516001600160a01b03811681146200015a57600080fd5b9392505050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200018c57607f821691505b602082108103620001ad57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200020157600081815260208120601f850160051c81016020861015620001dc5750805b601f850160051c820191505b81811015620001fd57828155600101620001e8565b5050505b505050565b81516001600160401b0381111562000222576200022262000161565b6200023a8162000233845462000177565b84620001b3565b602080601f831160018114620002725760008415620002595750858301515b600019600386901b1c1916600185901b178555620001fd565b600085815260208120601f198616915b82811015620002a35788860151825594840194600190910190840162000282565b5085821015620002c25787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6120a680620002e26000396000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c8063781f0b72116100c3578063b88d4fde1161007c578063b88d4fde146102cb578063c87b56dd146102de578063e985e9c5146102f1578063f0f3f2c814610304578063f2fde38b14610317578063ffa1ad741461032a57600080fd5b8063781f0b7214610266578063812739a2146102795780638da5cb5b1461028157806395d89b4114610292578063a22cb4651461029a578063a84ce2b5146102a857600080fd5b806323b872dd1161011557806323b872dd146101f157806342842e0e146102045780636352211e14610217578063695850fb1461022a57806370a082311461024b578063715018a61461025e57600080fd5b806301ffc9a71461015257806306fdde031461017a578063081812fc1461018f578063095ea7b3146101ba578063107046bd146101cf575b600080fd5b6101656101603660046117d6565b61034e565b60405190151581526020015b60405180910390f35b6101826103a0565b6040516101719190611843565b6101a261019d366004611856565b610432565b6040516001600160a01b039091168152602001610171565b6101cd6101c836600461188b565b61045b565b005b6101e26101dd366004611856565b610474565b604051610171939291906118ed565b6101cd6101ff366004611929565b6105ab565b6101cd610212366004611929565b61063b565b6101a2610225366004611856565b61065b565b61023d6102383660046119ae565b610666565b604051908152602001610171565b61023d6102593660046119f0565b6107b9565b6101cd610801565b6101cd610274366004611a0b565b610815565b60075461023d565b6006546001600160a01b03166101a2565b61018261099a565b6101cd6101c8366004611a6b565b6102bb6102b6366004611aa7565b6109a9565b6040516101719493929190611b1e565b6101cd6102d9366004611bde565b610d6f565b6101826102ec366004611856565b610d86565b6101656102ff366004611cba565b610dfb565b6101e2610312366004611856565b610e29565b6101cd6103253660046119f0565b610fbe565b610182604051806040016040528060058152602001640302e312e360dc1b81525081565b60006001600160e01b031982166380ac58cd60e01b148061037f57506001600160e01b03198216635b5e139f60e01b145b8061039a57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060600080546103af90611ced565b80601f01602080910402602001604051908101604052809291908181526020018280546103db90611ced565b80156104285780601f106103fd57610100808354040283529160200191610428565b820191906000526020600020905b81548152906001019060200180831161040b57829003601f168201915b5050505050905090565b600061043d82610ffc565b506000828152600460205260409020546001600160a01b031661039a565b60405163ab064ad360e01b815260040160405180910390fd5b6008602052600090815260409020805460018201805460ff909216929161049a90611ced565b80601f01602080910402602001604051908101604052809291908181526020018280546104c690611ced565b80156105135780601f106104e857610100808354040283529160200191610513565b820191906000526020600020905b8154815290600101906020018083116104f657829003601f168201915b50505050509080600201805461052890611ced565b80601f016020809104026020016040519081016040528092919081815260200182805461055490611ced565b80156105a15780601f10610576576101008083540402835291602001916105a1565b820191906000526020600020905b81548152906001019060200180831161058457829003601f168201915b5050505050905083565b6001600160a01b0382166105da57604051633250574960e11b8152600060048201526024015b60405180910390fd5b60006105e7838333611035565b9050836001600160a01b0316816001600160a01b031614610635576040516364283d7b60e01b81526001600160a01b03808616600483015260248201849052821660448201526064016105d1565b50505050565b61065683838360405180602001604052806000815250610d6f565b505050565b600061039a82610ffc565b6000610670611096565b600082900361069257604051631d0202a760e01b815260040160405180910390fd5b600780549060006106a283611d3d565b9190505590506106c36106bd6006546001600160a01b031690565b826110c3565b6040805160608101909152806000815260200184848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525093855250506040805160208181018352848252948501528583526008909352502081518154829060ff19166001836003811115610747576107476118b5565b0217905550602082015160018201906107609082611da4565b50604082015160028201906107759082611da4565b50905050807fed06d1e70f1faa0e1750def1b3a1d942390a8f47d03679c9025a1c38dc34fe7b84846040516107ab929190611e64565b60405180910390a292915050565b60006001600160a01b0382166107e5576040516322718ad960e21b8152600060048201526024016105d1565b506001600160a01b031660009081526003602052604090205490565b610809611096565b61081360006110e1565b565b61081d611096565b6000848152600260205260409020546001600160a01b03166108555760405163a89b369d60e01b8152600481018590526024016105d1565b600084815260086020526040902080546108729060ff1685611133565b61089757805460405163e3962ba360e01b81526105d19160ff16908690600401611e93565b60038460038111156108ab576108ab6118b5565b1480156108b6575081155b156108d457604051638498cab160e01b815260040160405180910390fd5b80548490829060ff191660018360038111156108f2576108f26118b5565b0217905550847f8fb6fda973f304b2834c4147004045448416c05b253872373ac5b19f4a5b7a5d856040516109279190611eae565b60405180910390a26003846003811115610943576109436118b5565b036109935760028101610957838583611ebc565b50847f21918e4d2b7d177f0ea90c1f25bcc9e87947e3bc5bb3cbf1d8a395279dfb0145848460405161098a929190611e64565b60405180910390a25b5050505050565b6060600180546103af90611ced565b60608060608060006007549050806000036109d75760405163ab9a687960e01b815260040160405180910390fd5b60006109e38888611f7c565b9050818110610a255786886109f9600185611f93565b610a039190611fa6565b604051635de89e2760e11b8152600481019290925260248201526044016105d1565b6000610a318983611fc8565b905082811115610a3e5750815b6000610a4a8383611f93565b90508067ffffffffffffffff811115610a6557610a65611bc8565b604051908082528060200260200182016040528015610a8e578160200160208202803683370190505b5097508067ffffffffffffffff811115610aaa57610aaa611bc8565b604051908082528060200260200182016040528015610ad3578160200160208202803683370190505b5096508067ffffffffffffffff811115610aef57610aef611bc8565b604051908082528060200260200182016040528015610b2257816020015b6060815260200190600190039081610b0d5790505b5095508067ffffffffffffffff811115610b3e57610b3e611bc8565b604051908082528060200260200182016040528015610b7157816020015b6060815260200190600190039081610b5c5790505b50945060005b81811015610d61578385038190036000190160008181526008602052604090208a5182908c9085908110610bad57610bad611fdb565b602090810291909101015280548a5160ff909116908b9085908110610bd457610bd4611fdb565b60200260200101906003811115610bed57610bed6118b5565b90816003811115610c0057610c006118b5565b905250600181018054610c1290611ced565b80601f0160208091040260200160405190810160405280929190818152602001828054610c3e90611ced565b8015610c8b5780601f10610c6057610100808354040283529160200191610c8b565b820191906000526020600020905b815481529060010190602001808311610c6e57829003601f168201915b5050505050898481518110610ca257610ca2611fdb565b6020026020010181905250806002018054610cbc90611ced565b80601f0160208091040260200160405190810160405280929190818152602001828054610ce890611ced565b8015610d355780601f10610d0a57610100808354040283529160200191610d35565b820191906000526020600020905b815481529060010190602001808311610d1857829003601f168201915b5050505050888481518110610d4c57610d4c611fdb565b60209081029190910101525050600101610b77565b505050505092959194509250565b610d7a8484846105ab565b610635848484846111ee565b6060610d9182610ffc565b506000610da960408051602081019091526000815290565b90506000815111610dc95760405180602001604052806000815250610df4565b80610dd384611310565b604051602001610de4929190611ff1565b6040516020818303038152906040525b9392505050565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b600060608082610e4e856000908152600260205260409020546001600160a01b031690565b6001600160a01b031603610e785760405163a89b369d60e01b8152600481018590526024016105d1565b6000848152600860205260409020805460018201805460ff9092169160028401908290610ea490611ced565b80601f0160208091040260200160405190810160405280929190818152602001828054610ed090611ced565b8015610f1d5780601f10610ef257610100808354040283529160200191610f1d565b820191906000526020600020905b815481529060010190602001808311610f0057829003601f168201915b50505050509150808054610f3090611ced565b80601f0160208091040260200160405190810160405280929190818152602001828054610f5c90611ced565b8015610fa95780601f10610f7e57610100808354040283529160200191610fa9565b820191906000526020600020905b815481529060010190602001808311610f8c57829003601f168201915b50505050509050935093509350509193909250565b610fc6611096565b6001600160a01b038116610ff057604051631e4fbdf760e01b8152600060048201526024016105d1565b610ff9816110e1565b50565b6000818152600260205260408120546001600160a01b03168061039a57604051637e27328960e01b8152600481018490526024016105d1565b6000828152600260205260408120546001600160a01b0316801580159061106457506001600160a01b03851615155b156110825760405163ab064ad360e01b815260040160405180910390fd5b61108d8585856113a3565b95945050505050565b6006546001600160a01b031633146108135760405163118cdaa760e01b81523360048201526024016105d1565b6110dd82826040518060200160405280600081525061149c565b5050565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006002836003811115611149576111496118b5565b148061116657506003836003811115611164576111646118b5565b145b156111735750600061039a565b6000836003811115611187576111876118b5565b036111c55760015b8260038111156111a1576111a16118b5565b14806111be575060028260038111156111bc576111bc6118b5565b145b905061039a565b60018360038111156111d9576111d96118b5565b036111e557600361118f565b50600092915050565b6001600160a01b0383163b1561063557604051630a85bd0160e11b81526001600160a01b0384169063150b7a0290611230903390889087908790600401612020565b6020604051808303816000875af192505050801561126b575060408051601f3d908101601f1916820190925261126891810190612053565b60015b6112d4573d808015611299576040519150601f19603f3d011682016040523d82523d6000602084013e61129e565b606091505b5080516000036112cc57604051633250574960e11b81526001600160a01b03851660048201526024016105d1565b805181602001fd5b6001600160e01b03198116630a85bd0160e11b1461099357604051633250574960e11b81526001600160a01b03851660048201526024016105d1565b6060600061131d836114b3565b600101905060008167ffffffffffffffff81111561133d5761133d611bc8565b6040519080825280601f01601f191660200182016040528015611367576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a850494508461137157509392505050565b6000828152600260205260408120546001600160a01b03908116908316156113d0576113d081848661158b565b6001600160a01b0381161561140e576113ed6000856000806115ef565b6001600160a01b038116600090815260036020526040902080546000190190555b6001600160a01b0385161561143d576001600160a01b0385166000908152600360205260409020805460010190555b60008481526002602052604080822080546001600160a01b0319166001600160a01b0389811691821790925591518793918516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4949350505050565b6114a683836116f5565b61065660008484846111ee565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106114f25772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef8100000000831061151e576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061153c57662386f26fc10000830492506010015b6305f5e1008310611554576305f5e100830492506008015b612710831061156857612710830492506004015b6064831061157a576064830492506002015b600a831061039a5760010192915050565b61159683838361175a565b610656576001600160a01b0383166115c457604051637e27328960e01b8152600481018290526024016105d1565b60405163177e802f60e01b81526001600160a01b0383166004820152602481018290526044016105d1565b808061160357506001600160a01b03821615155b156116c557600061161384610ffc565b90506001600160a01b0383161580159061163f5750826001600160a01b0316816001600160a01b031614155b801561165257506116508184610dfb565b155b1561167b5760405163a9fbf51f60e01b81526001600160a01b03841660048201526024016105d1565b81156116c35783856001600160a01b0316826001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b5050600090815260046020526040902080546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b03821661171f57604051633250574960e11b8152600060048201526024016105d1565b600061172d83836000611035565b90506001600160a01b03811615610656576040516339e3563760e11b8152600060048201526024016105d1565b60006001600160a01b038316158015906117b85750826001600160a01b0316846001600160a01b0316148061179457506117948484610dfb565b806117b857506000828152600460205260409020546001600160a01b038481169116145b949350505050565b6001600160e01b031981168114610ff957600080fd5b6000602082840312156117e857600080fd5b8135610df4816117c0565b60005b8381101561180e5781810151838201526020016117f6565b50506000910152565b6000815180845261182f8160208601602086016117f3565b601f01601f19169290920160200192915050565b602081526000610df46020830184611817565b60006020828403121561186857600080fd5b5035919050565b80356001600160a01b038116811461188657600080fd5b919050565b6000806040838503121561189e57600080fd5b6118a78361186f565b946020939093013593505050565b634e487b7160e01b600052602160045260246000fd5b600481106118e957634e487b7160e01b600052602160045260246000fd5b9052565b6118f781856118cb565b60606020820152600061190d6060830185611817565b828103604084015261191f8185611817565b9695505050505050565b60008060006060848603121561193e57600080fd5b6119478461186f565b92506119556020850161186f565b9150604084013590509250925092565b60008083601f84011261197757600080fd5b50813567ffffffffffffffff81111561198f57600080fd5b6020830191508360208285010111156119a757600080fd5b9250929050565b600080602083850312156119c157600080fd5b823567ffffffffffffffff8111156119d857600080fd5b6119e485828601611965565b90969095509350505050565b600060208284031215611a0257600080fd5b610df48261186f565b60008060008060608587031215611a2157600080fd5b84359350602085013560048110611a3757600080fd5b9250604085013567ffffffffffffffff811115611a5357600080fd5b611a5f87828801611965565b95989497509550505050565b60008060408385031215611a7e57600080fd5b611a878361186f565b915060208301358015158114611a9c57600080fd5b809150509250929050565b60008060408385031215611aba57600080fd5b50508035926020909101359150565b600081518084526020808501808196508360051b8101915082860160005b85811015611b11578284038952611aff848351611817565b98850198935090840190600101611ae7565b5091979650505050505050565b6080808252855190820181905260009060209060a0840190828901845b82811015611b5757815184529284019290840190600101611b3b565b5050508381038285015286518082528783019183019060005b81811015611b9357611b838385516118cb565b9284019291840191600101611b70565b50508481036040860152611ba78188611ac9565b925050508281036060840152611bbd8185611ac9565b979650505050505050565b634e487b7160e01b600052604160045260246000fd5b60008060008060808587031215611bf457600080fd5b611bfd8561186f565b9350611c0b6020860161186f565b925060408501359150606085013567ffffffffffffffff80821115611c2f57600080fd5b818701915087601f830112611c4357600080fd5b813581811115611c5557611c55611bc8565b604051601f8201601f19908116603f01168101908382118183101715611c7d57611c7d611bc8565b816040528281528a6020848701011115611c9657600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60008060408385031215611ccd57600080fd5b611cd68361186f565b9150611ce46020840161186f565b90509250929050565b600181811c90821680611d0157607f821691505b602082108103611d2157634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600060018201611d4f57611d4f611d27565b5060010190565b601f82111561065657600081815260208120601f850160051c81016020861015611d7d5750805b601f850160051c820191505b81811015611d9c57828155600101611d89565b505050505050565b815167ffffffffffffffff811115611dbe57611dbe611bc8565b611dd281611dcc8454611ced565b84611d56565b602080601f831160018114611e075760008415611def5750858301515b600019600386901b1c1916600185901b178555611d9c565b600085815260208120601f198616915b82811015611e3657888601518255948401946001909101908401611e17565b5085821015611e545787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b60408101611ea182856118cb565b610df460208301846118cb565b6020810161039a82846118cb565b67ffffffffffffffff831115611ed457611ed4611bc8565b611ee883611ee28354611ced565b83611d56565b6000601f841160018114611f1c5760008515611f045750838201355b600019600387901b1c1916600186901b178355610993565b600083815260209020601f19861690835b82811015611f4d5786850135825560209485019460019092019101611f2d565b5086821015611f6a5760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b808202811582820484141761039a5761039a611d27565b8181038181111561039a5761039a611d27565b600082611fc357634e487b7160e01b600052601260045260246000fd5b500490565b8082018082111561039a5761039a611d27565b634e487b7160e01b600052603260045260246000fd5b600083516120038184602088016117f3565b8351908301906120178183602088016117f3565b01949350505050565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061191f90830184611817565b60006020828403121561206557600080fd5b8151610df4816117c056fea2646970667358221220a90a7695c49bf153c01937060bdcae8cd109f13f6192fdeab9ca54b0d322a74964736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061014d5760003560e01c8063781f0b72116100c3578063b88d4fde1161007c578063b88d4fde146102cb578063c87b56dd146102de578063e985e9c5146102f1578063f0f3f2c814610304578063f2fde38b14610317578063ffa1ad741461032a57600080fd5b8063781f0b7214610266578063812739a2146102795780638da5cb5b1461028157806395d89b4114610292578063a22cb4651461029a578063a84ce2b5146102a857600080fd5b806323b872dd1161011557806323b872dd146101f157806342842e0e146102045780636352211e14610217578063695850fb1461022a57806370a082311461024b578063715018a61461025e57600080fd5b806301ffc9a71461015257806306fdde031461017a578063081812fc1461018f578063095ea7b3146101ba578063107046bd146101cf575b600080fd5b6101656101603660046117d6565b61034e565b60405190151581526020015b60405180910390f35b6101826103a0565b6040516101719190611843565b6101a261019d366004611856565b610432565b6040516001600160a01b039091168152602001610171565b6101cd6101c836600461188b565b61045b565b005b6101e26101dd366004611856565b610474565b604051610171939291906118ed565b6101cd6101ff366004611929565b6105ab565b6101cd610212366004611929565b61063b565b6101a2610225366004611856565b61065b565b61023d6102383660046119ae565b610666565b604051908152602001610171565b61023d6102593660046119f0565b6107b9565b6101cd610801565b6101cd610274366004611a0b565b610815565b60075461023d565b6006546001600160a01b03166101a2565b61018261099a565b6101cd6101c8366004611a6b565b6102bb6102b6366004611aa7565b6109a9565b6040516101719493929190611b1e565b6101cd6102d9366004611bde565b610d6f565b6101826102ec366004611856565b610d86565b6101656102ff366004611cba565b610dfb565b6101e2610312366004611856565b610e29565b6101cd6103253660046119f0565b610fbe565b610182604051806040016040528060058152602001640302e312e360dc1b81525081565b60006001600160e01b031982166380ac58cd60e01b148061037f57506001600160e01b03198216635b5e139f60e01b145b8061039a57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060600080546103af90611ced565b80601f01602080910402602001604051908101604052809291908181526020018280546103db90611ced565b80156104285780601f106103fd57610100808354040283529160200191610428565b820191906000526020600020905b81548152906001019060200180831161040b57829003601f168201915b5050505050905090565b600061043d82610ffc565b506000828152600460205260409020546001600160a01b031661039a565b60405163ab064ad360e01b815260040160405180910390fd5b6008602052600090815260409020805460018201805460ff909216929161049a90611ced565b80601f01602080910402602001604051908101604052809291908181526020018280546104c690611ced565b80156105135780601f106104e857610100808354040283529160200191610513565b820191906000526020600020905b8154815290600101906020018083116104f657829003601f168201915b50505050509080600201805461052890611ced565b80601f016020809104026020016040519081016040528092919081815260200182805461055490611ced565b80156105a15780601f10610576576101008083540402835291602001916105a1565b820191906000526020600020905b81548152906001019060200180831161058457829003601f168201915b5050505050905083565b6001600160a01b0382166105da57604051633250574960e11b8152600060048201526024015b60405180910390fd5b60006105e7838333611035565b9050836001600160a01b0316816001600160a01b031614610635576040516364283d7b60e01b81526001600160a01b03808616600483015260248201849052821660448201526064016105d1565b50505050565b61065683838360405180602001604052806000815250610d6f565b505050565b600061039a82610ffc565b6000610670611096565b600082900361069257604051631d0202a760e01b815260040160405180910390fd5b600780549060006106a283611d3d565b9190505590506106c36106bd6006546001600160a01b031690565b826110c3565b6040805160608101909152806000815260200184848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525093855250506040805160208181018352848252948501528583526008909352502081518154829060ff19166001836003811115610747576107476118b5565b0217905550602082015160018201906107609082611da4565b50604082015160028201906107759082611da4565b50905050807fed06d1e70f1faa0e1750def1b3a1d942390a8f47d03679c9025a1c38dc34fe7b84846040516107ab929190611e64565b60405180910390a292915050565b60006001600160a01b0382166107e5576040516322718ad960e21b8152600060048201526024016105d1565b506001600160a01b031660009081526003602052604090205490565b610809611096565b61081360006110e1565b565b61081d611096565b6000848152600260205260409020546001600160a01b03166108555760405163a89b369d60e01b8152600481018590526024016105d1565b600084815260086020526040902080546108729060ff1685611133565b61089757805460405163e3962ba360e01b81526105d19160ff16908690600401611e93565b60038460038111156108ab576108ab6118b5565b1480156108b6575081155b156108d457604051638498cab160e01b815260040160405180910390fd5b80548490829060ff191660018360038111156108f2576108f26118b5565b0217905550847f8fb6fda973f304b2834c4147004045448416c05b253872373ac5b19f4a5b7a5d856040516109279190611eae565b60405180910390a26003846003811115610943576109436118b5565b036109935760028101610957838583611ebc565b50847f21918e4d2b7d177f0ea90c1f25bcc9e87947e3bc5bb3cbf1d8a395279dfb0145848460405161098a929190611e64565b60405180910390a25b5050505050565b6060600180546103af90611ced565b60608060608060006007549050806000036109d75760405163ab9a687960e01b815260040160405180910390fd5b60006109e38888611f7c565b9050818110610a255786886109f9600185611f93565b610a039190611fa6565b604051635de89e2760e11b8152600481019290925260248201526044016105d1565b6000610a318983611fc8565b905082811115610a3e5750815b6000610a4a8383611f93565b90508067ffffffffffffffff811115610a6557610a65611bc8565b604051908082528060200260200182016040528015610a8e578160200160208202803683370190505b5097508067ffffffffffffffff811115610aaa57610aaa611bc8565b604051908082528060200260200182016040528015610ad3578160200160208202803683370190505b5096508067ffffffffffffffff811115610aef57610aef611bc8565b604051908082528060200260200182016040528015610b2257816020015b6060815260200190600190039081610b0d5790505b5095508067ffffffffffffffff811115610b3e57610b3e611bc8565b604051908082528060200260200182016040528015610b7157816020015b6060815260200190600190039081610b5c5790505b50945060005b81811015610d61578385038190036000190160008181526008602052604090208a5182908c9085908110610bad57610bad611fdb565b602090810291909101015280548a5160ff909116908b9085908110610bd457610bd4611fdb565b60200260200101906003811115610bed57610bed6118b5565b90816003811115610c0057610c006118b5565b905250600181018054610c1290611ced565b80601f0160208091040260200160405190810160405280929190818152602001828054610c3e90611ced565b8015610c8b5780601f10610c6057610100808354040283529160200191610c8b565b820191906000526020600020905b815481529060010190602001808311610c6e57829003601f168201915b5050505050898481518110610ca257610ca2611fdb565b6020026020010181905250806002018054610cbc90611ced565b80601f0160208091040260200160405190810160405280929190818152602001828054610ce890611ced565b8015610d355780601f10610d0a57610100808354040283529160200191610d35565b820191906000526020600020905b815481529060010190602001808311610d1857829003601f168201915b5050505050888481518110610d4c57610d4c611fdb565b60209081029190910101525050600101610b77565b505050505092959194509250565b610d7a8484846105ab565b610635848484846111ee565b6060610d9182610ffc565b506000610da960408051602081019091526000815290565b90506000815111610dc95760405180602001604052806000815250610df4565b80610dd384611310565b604051602001610de4929190611ff1565b6040516020818303038152906040525b9392505050565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b600060608082610e4e856000908152600260205260409020546001600160a01b031690565b6001600160a01b031603610e785760405163a89b369d60e01b8152600481018590526024016105d1565b6000848152600860205260409020805460018201805460ff9092169160028401908290610ea490611ced565b80601f0160208091040260200160405190810160405280929190818152602001828054610ed090611ced565b8015610f1d5780601f10610ef257610100808354040283529160200191610f1d565b820191906000526020600020905b815481529060010190602001808311610f0057829003601f168201915b50505050509150808054610f3090611ced565b80601f0160208091040260200160405190810160405280929190818152602001828054610f5c90611ced565b8015610fa95780601f10610f7e57610100808354040283529160200191610fa9565b820191906000526020600020905b815481529060010190602001808311610f8c57829003601f168201915b50505050509050935093509350509193909250565b610fc6611096565b6001600160a01b038116610ff057604051631e4fbdf760e01b8152600060048201526024016105d1565b610ff9816110e1565b50565b6000818152600260205260408120546001600160a01b03168061039a57604051637e27328960e01b8152600481018490526024016105d1565b6000828152600260205260408120546001600160a01b0316801580159061106457506001600160a01b03851615155b156110825760405163ab064ad360e01b815260040160405180910390fd5b61108d8585856113a3565b95945050505050565b6006546001600160a01b031633146108135760405163118cdaa760e01b81523360048201526024016105d1565b6110dd82826040518060200160405280600081525061149c565b5050565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006002836003811115611149576111496118b5565b148061116657506003836003811115611164576111646118b5565b145b156111735750600061039a565b6000836003811115611187576111876118b5565b036111c55760015b8260038111156111a1576111a16118b5565b14806111be575060028260038111156111bc576111bc6118b5565b145b905061039a565b60018360038111156111d9576111d96118b5565b036111e557600361118f565b50600092915050565b6001600160a01b0383163b1561063557604051630a85bd0160e11b81526001600160a01b0384169063150b7a0290611230903390889087908790600401612020565b6020604051808303816000875af192505050801561126b575060408051601f3d908101601f1916820190925261126891810190612053565b60015b6112d4573d808015611299576040519150601f19603f3d011682016040523d82523d6000602084013e61129e565b606091505b5080516000036112cc57604051633250574960e11b81526001600160a01b03851660048201526024016105d1565b805181602001fd5b6001600160e01b03198116630a85bd0160e11b1461099357604051633250574960e11b81526001600160a01b03851660048201526024016105d1565b6060600061131d836114b3565b600101905060008167ffffffffffffffff81111561133d5761133d611bc8565b6040519080825280601f01601f191660200182016040528015611367576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a850494508461137157509392505050565b6000828152600260205260408120546001600160a01b03908116908316156113d0576113d081848661158b565b6001600160a01b0381161561140e576113ed6000856000806115ef565b6001600160a01b038116600090815260036020526040902080546000190190555b6001600160a01b0385161561143d576001600160a01b0385166000908152600360205260409020805460010190555b60008481526002602052604080822080546001600160a01b0319166001600160a01b0389811691821790925591518793918516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4949350505050565b6114a683836116f5565b61065660008484846111ee565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106114f25772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef8100000000831061151e576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061153c57662386f26fc10000830492506010015b6305f5e1008310611554576305f5e100830492506008015b612710831061156857612710830492506004015b6064831061157a576064830492506002015b600a831061039a5760010192915050565b61159683838361175a565b610656576001600160a01b0383166115c457604051637e27328960e01b8152600481018290526024016105d1565b60405163177e802f60e01b81526001600160a01b0383166004820152602481018290526044016105d1565b808061160357506001600160a01b03821615155b156116c557600061161384610ffc565b90506001600160a01b0383161580159061163f5750826001600160a01b0316816001600160a01b031614155b801561165257506116508184610dfb565b155b1561167b5760405163a9fbf51f60e01b81526001600160a01b03841660048201526024016105d1565b81156116c35783856001600160a01b0316826001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b5050600090815260046020526040902080546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b03821661171f57604051633250574960e11b8152600060048201526024016105d1565b600061172d83836000611035565b90506001600160a01b03811615610656576040516339e3563760e11b8152600060048201526024016105d1565b60006001600160a01b038316158015906117b85750826001600160a01b0316846001600160a01b0316148061179457506117948484610dfb565b806117b857506000828152600460205260409020546001600160a01b038481169116145b949350505050565b6001600160e01b031981168114610ff957600080fd5b6000602082840312156117e857600080fd5b8135610df4816117c0565b60005b8381101561180e5781810151838201526020016117f6565b50506000910152565b6000815180845261182f8160208601602086016117f3565b601f01601f19169290920160200192915050565b602081526000610df46020830184611817565b60006020828403121561186857600080fd5b5035919050565b80356001600160a01b038116811461188657600080fd5b919050565b6000806040838503121561189e57600080fd5b6118a78361186f565b946020939093013593505050565b634e487b7160e01b600052602160045260246000fd5b600481106118e957634e487b7160e01b600052602160045260246000fd5b9052565b6118f781856118cb565b60606020820152600061190d6060830185611817565b828103604084015261191f8185611817565b9695505050505050565b60008060006060848603121561193e57600080fd5b6119478461186f565b92506119556020850161186f565b9150604084013590509250925092565b60008083601f84011261197757600080fd5b50813567ffffffffffffffff81111561198f57600080fd5b6020830191508360208285010111156119a757600080fd5b9250929050565b600080602083850312156119c157600080fd5b823567ffffffffffffffff8111156119d857600080fd5b6119e485828601611965565b90969095509350505050565b600060208284031215611a0257600080fd5b610df48261186f565b60008060008060608587031215611a2157600080fd5b84359350602085013560048110611a3757600080fd5b9250604085013567ffffffffffffffff811115611a5357600080fd5b611a5f87828801611965565b95989497509550505050565b60008060408385031215611a7e57600080fd5b611a878361186f565b915060208301358015158114611a9c57600080fd5b809150509250929050565b60008060408385031215611aba57600080fd5b50508035926020909101359150565b600081518084526020808501808196508360051b8101915082860160005b85811015611b11578284038952611aff848351611817565b98850198935090840190600101611ae7565b5091979650505050505050565b6080808252855190820181905260009060209060a0840190828901845b82811015611b5757815184529284019290840190600101611b3b565b5050508381038285015286518082528783019183019060005b81811015611b9357611b838385516118cb565b9284019291840191600101611b70565b50508481036040860152611ba78188611ac9565b925050508281036060840152611bbd8185611ac9565b979650505050505050565b634e487b7160e01b600052604160045260246000fd5b60008060008060808587031215611bf457600080fd5b611bfd8561186f565b9350611c0b6020860161186f565b925060408501359150606085013567ffffffffffffffff80821115611c2f57600080fd5b818701915087601f830112611c4357600080fd5b813581811115611c5557611c55611bc8565b604051601f8201601f19908116603f01168101908382118183101715611c7d57611c7d611bc8565b816040528281528a6020848701011115611c9657600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60008060408385031215611ccd57600080fd5b611cd68361186f565b9150611ce46020840161186f565b90509250929050565b600181811c90821680611d0157607f821691505b602082108103611d2157634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600060018201611d4f57611d4f611d27565b5060010190565b601f82111561065657600081815260208120601f850160051c81016020861015611d7d5750805b601f850160051c820191505b81811015611d9c57828155600101611d89565b505050505050565b815167ffffffffffffffff811115611dbe57611dbe611bc8565b611dd281611dcc8454611ced565b84611d56565b602080601f831160018114611e075760008415611def5750858301515b600019600386901b1c1916600185901b178555611d9c565b600085815260208120601f198616915b82811015611e3657888601518255948401946001909101908401611e17565b5085821015611e545787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b60408101611ea182856118cb565b610df460208301846118cb565b6020810161039a82846118cb565b67ffffffffffffffff831115611ed457611ed4611bc8565b611ee883611ee28354611ced565b83611d56565b6000601f841160018114611f1c5760008515611f045750838201355b600019600387901b1c1916600186901b178355610993565b600083815260209020601f19861690835b82811015611f4d5786850135825560209485019460019092019101611f2d565b5086821015611f6a5760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b808202811582820484141761039a5761039a611d27565b8181038181111561039a5761039a611d27565b600082611fc357634e487b7160e01b600052601260045260246000fd5b500490565b8082018082111561039a5761039a611d27565b634e487b7160e01b600052603260045260246000fd5b600083516120038184602088016117f3565b8351908301906120178183602088016117f3565b01949350505050565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061191f90830184611817565b60006020828403121561206557600080fd5b8151610df4816117c056fea2646970667358221220a90a7695c49bf153c01937060bdcae8cd109f13f6192fdeab9ca54b0d322a74964736f6c63430008140033",
  "devdoc": {
    "details": "ERC721 token contract for managing community projects with immutable blockchain records",
    "errors": {
      "ERC721IncorrectOwner(address,uint256,address)": [
        {
          "details": "Indicates an error related to the ownership over a particular token. Used in transfers.",
          "params": {
            "owner": "Address of the current owner of a token.",
            "sender": "Address whose tokens are being transferred.",
            "tokenId": "Identifier number of a token."
          }
        }
      ],
      "ERC721InsufficientApproval(address,uint256)": [
        {
          "details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
          "params": {
            "operator": "Address that may be allowed to operate on tokens without being their owner.",
            "tokenId": "Identifier number of a token."
          }
        }
      ],
      "ERC721InvalidApprover(address)": [
        {
          "details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
          "params": {
            "approver": "Address initiating an approval operation."
          }
        }
      ],
      "ERC721InvalidOperator(address)": [
        {
          "details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
          "params": {
            "operator": "Address that may be allowed to operate on tokens without being their owner."
          }
        }
      ],
      "ERC721InvalidOwner(address)": [
        {
          "details": "Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.",
          "params": {
            "owner": "Address of the current owner of a token."
          }
        }
      ],
      "ERC721InvalidReceiver(address)": [
        {
          "details": "Indicates a failure with the token `receiver`. Used in transfers.",
          "params": {
            "receiver": "Address to which tokens are being transferred."
          }
        }
      ],
      "ERC721InvalidSender(address)": [
        {
          "details": "Indicates a failure with the token `sender`. Used in transfers.",
          "params": {
            "sender": "Address whose tokens are being transferred."
          }
        }
      ],
      "ERC721NonexistentToken(uint256)": [
        {
          "details": "Indicates a `tokenId` whose `owner` is the zero address.",
          "params": {
            "tokenId": "Identifier number of a token."
          }
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ProjectNotFound(uint256)": [
        {
          "details": "Custom errors for gas optimization and better error handling"
        }
      ]
    },
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
      },
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
      },
      "ProjectCreated(uint256,string)": {
        "details": "Emitted when a new project is created",
        "params": {
          "proposalURI": "The URI containing project proposal details",
          "tokenId": "The unique identifier of the project"
        }
      },
      "ProjectReportAdded(uint256,string)": {
        "details": "Emitted when a completion report is added to a project",
        "params": {
          "reportURI": "The URI containing project completion report",
          "tokenId": "The unique identifier of the project"
        }
      },
      "ProjectStatusUpdated(uint256,uint8)": {
        "details": "Emitted when a project's status is updated",
        "params": {
          "newStatus": "The new status of the project",
          "tokenId": "The unique identifier of the project"
        }
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `tokenId` token is transferred from `from` to `to`."
      }
    },
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "Override approve to prevent approvals since transfers are disabled"
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "constructor": {
        "details": "Constructor initializes the ERC721 token and sets the initial owner",
        "params": {
          "initialOwner": "Address that will own the contract and can mint/update projects"
        }
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getProject(uint256)": {
        "details": "Retrieves detailed information for a specific project",
        "params": {
          "tokenId": "The unique identifier of the project"
        },
        "returns": {
          "proposalURI": "URI containing project proposal details",
          "reportURI": "URI containing project completion report (empty if not completed)",
          "status": "Current status of the project"
        }
      },
      "getProjects(uint256,uint256)": {
        "details": "Retrieves a paginated list of projects in descending order (newest first)",
        "params": {
          "page": "Page number (0-indexed, page 0 contains newest projects)",
          "projectsPerPage": "Number of projects to return per page"
        },
        "returns": {
          "proposalURIs": "Array of project proposal URIs",
          "reportURIs": "Array of project report URIs",
          "statuses": "Array of project statuses",
          "tokenIds": "Array of project token IDs"
        }
      },
      "getTotalProjects()": {
        "details": "Returns the total number of projects created",
        "returns": {
          "_0": "Total count of projects (equivalent to _nextTokenId)"
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "safeMint(string)": {
        "details": "Creates a new project NFT with the specified proposal",
        "params": {
          "proposalURI": "URI containing the project proposal details (cannot be empty)"
        },
        "returns": {
          "tokenId": "The unique identifier of the newly created project"
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "Override setApprovalForAll to prevent approvals since transfers are disabled"
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateStatus(uint256,uint8,string)": {
        "details": "Updates the status of an existing project with optional completion report",
        "params": {
          "newStatus": "The new status to assign to the project",
          "reportURI": "URI containing completion report (required for completed projects)",
          "tokenId": "The unique identifier of the project to update"
        }
      }
    },
    "stateVariables": {
      "VERSION": {
        "details": "Contract version for tracking deployments"
      },
      "_nextTokenId": {
        "details": "Counter for generating unique token IDs, starts at 0"
      },
      "projects": {
        "details": "Mapping from token ID to project data"
      }
    },
    "title": "EntewardProject",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "approve(address,uint256)": {
        "notice": "Approvals are not allowed as transfers are disabled"
      },
      "getProject(uint256)": {
        "notice": "Reverts if the project does not exist"
      },
      "getProjects(uint256,uint256)": {
        "notice": "Gas-optimized for batch retrieval of project dataReturns empty arrays if no projects exist on the requested page"
      },
      "getTotalProjects()": {
        "notice": "Useful for pagination calculations and UI display"
      },
      "safeMint(string)": {
        "notice": "Only the contract owner can create new projectsProjects are minted to the contract owner and cannot be transferredProjects start with \"Upcoming\" status by default"
      },
      "setApprovalForAll(address,bool)": {
        "notice": "Approvals are not allowed as transfers are disabled"
      },
      "updateStatus(uint256,uint8,string)": {
        "notice": "Only the contract owner can update project statusStatus transitions follow strict rules to maintain data integrityCompleted projects must include a report URI"
      }
    },
    "notice": "This contract allows local representatives to create, track, and update community projects Each project is represented as an NFT with proposal and report URIs stored immutably on-chain",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 317,
        "contract": "contracts/EntewardProject.sol:EntewardProject",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 319,
        "contract": "contracts/EntewardProject.sol:EntewardProject",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 323,
        "contract": "contracts/EntewardProject.sol:EntewardProject",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 327,
        "contract": "contracts/EntewardProject.sol:EntewardProject",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 331,
        "contract": "contracts/EntewardProject.sol:EntewardProject",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 337,
        "contract": "contracts/EntewardProject.sol:EntewardProject",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 8,
        "contract": "contracts/EntewardProject.sol:EntewardProject",
        "label": "_owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 2954,
        "contract": "contracts/EntewardProject.sol:EntewardProject",
        "label": "_nextTokenId",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 2975,
        "contract": "contracts/EntewardProject.sol:EntewardProject",
        "label": "projects",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_struct(Project)2969_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(ProjectStatus)2960": {
        "encoding": "inplace",
        "label": "enum EntewardProject.ProjectStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(Project)2969_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct EntewardProject.Project)",
        "numberOfBytes": "32",
        "value": "t_struct(Project)2969_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Project)2969_storage": {
        "encoding": "inplace",
        "label": "struct EntewardProject.Project",
        "members": [
          {
            "astId": 2964,
            "contract": "contracts/EntewardProject.sol:EntewardProject",
            "label": "status",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(ProjectStatus)2960"
          },
          {
            "astId": 2966,
            "contract": "contracts/EntewardProject.sol:EntewardProject",
            "label": "proposalURI",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 2968,
            "contract": "contracts/EntewardProject.sol:EntewardProject",
            "label": "reportURI",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}